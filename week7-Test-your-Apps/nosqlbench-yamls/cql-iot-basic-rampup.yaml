# nb run driver=cql workload=cql-iot-basic-rampup.yaml threads=auto cycles=100000 --progress console:3s
description: |
  This workload emulates a time-series data model and ramps up data after schema creation.

blocks:
  # rampup phase is meant to bring a system under test to a realistic density with a realistic data set
  - tags:
      phase: rampup
    
    # this is the section where our "generated" data comes from
    # data is not randomly generated or anything like that, it comes from initial seed data and functions used to calculate values
    # the key here is that this data is deterministic which means subsequent runs will generate the same data
    # if you want a deeper dive take a look http://docs.nosqlbench.io/#/docs/bindings
    bindings:
      machine_id: Mod(10000); ToHashedUUID() -> java.util.UUID
      sensor_name: HashedLineToString('data/variable_words.txt')
      time: Mul(100); Div(10000L); ToDate()
      cell_timestamp: Mul(100L); Div(10000L); Mul(1000L)
      sensor_value: Normal(0.0,5.0); Add(100.0) -> double
      station_id: Div(10000);Mod(100); ToHashedUUID() -> java.util.UUID
      data: HashedFileExtractToString('data/lorem_ipsum_full.txt',800,1200)
    
    params:
      idempotent: true
      # set prepared to true since this query will run many times
      prepared: true
      # set our consistency level
      cl: LOCAL_QUORUM

    statements:
      # curly braces are mapping the respective bindings to the insert statement
      - insert-rampup: |
          insert into baselines.iot
          (machine_id, sensor_name, time, sensor_value, station_id, data)
          values ({machine_id}, {sensor_name}, {time}, {sensor_value}, {station_id}, {data})
          using timestamp {cell_timestamp}
